---

export interface Props {
  title: string;
  description: string;
  href: string;
  tags?: string[];
  type: 'blog' | 'project' | 'course' | 'projects' | 'courses';
  publishDate?: Date | undefined;
  heroImage?: string;
}

const { title, description, href, tags, publishDate, heroImage, type } = Astro.props;

const getTypeStyles = (type: 'blog' | 'project' | 'course' | 'projects' | 'courses') => {
  switch (type) {
    case 'blog':
      return {
        shadow: 'shadow-blue-100 hover:shadow-blue-200 hover:shadow-lg',
        badge: 'bg-blue-100 text-blue-700',
        label: 'Blog'
      };
    case 'project':
    case 'projects':
      return {
        shadow: 'shadow-emerald-100 hover:shadow-emerald-200 hover:shadow-lg',
        badge: 'bg-emerald-100 text-emerald-700',
        label: 'Project'
      };
    case 'course':
    case 'courses':
      return {
        shadow: 'shadow-purple-200 hover:shadow-purple-300 hover:shadow-lg',
        badge: 'bg-purple-200 text-purple-800',
        label: 'Course'
      };
    default:
      return {
        shadow: 'shadow-gray-100 hover:shadow-gray-200 hover:shadow-lg',
        badge: 'bg-gray-100 text-gray-700',
        label: 'Content'
      };
  }
};

const typeStyles = getTypeStyles(type);
---
<a
  href={href}
  class:list={[
    "group bg-white border border-gray-200 rounded-lg transition-all duration-300 flex flex-col overflow-hidden h-full min-h-[420px]",
    typeStyles.shadow
  ]}
  data-type={type}
  data-title={title.toLowerCase()}
>

  <div class="w-full h-40 overflow-hidden">
    <img
      src={heroImage || '/placeholder.png'}
      alt={`Thumbnail for ${title}`}
      class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
      loading="lazy"
      decoding="async"
      sizes="(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw"
    />
  </div>

  <div class="p-6 flex flex-col flex-grow">
    <div class="flex justify-between items-center mb-2">
      <div>
        {publishDate && (
          <p class="text-sm text-gray-500">
            {new Date(publishDate).toLocaleDateString('en-us', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}
          </p>
        )}
      </div>
      <span class:list={[
        "text-xs font-semibold px-2.5 py-1 rounded-full",
        typeStyles.badge
      ]}>
        {typeStyles.label}
      </span>
    </div>
    <h3 class="text-xl font-bold text-gray-900 group-hover:text-accent transition-colors duration-300 mb-2">
      {title}
    </h3>
    <p class="text-gray-600 mb-4 flex-grow line-clamp-2">
      {description}
    </p>

    <div class="mt-auto">
      <div class="flex flex-wrap gap-2 mb-4">
        {tags?.map(tag => (
          <span class="bg-gray-100 text-gray-700 text-xs font-semibold px-2.5 py-1 rounded-full">
            {tag}
          </span>
        ))}
      </div>
      <div class="text-accent font-semibold opacity-0 group-hover:opacity-100 transition-opacity duration-300">
        Read More
      </div>
    </div>
  </div>
</a>