---
import { getCollection } from 'astro:content';
import Card from './Card.astro';

interface Props {
  currentSlug: string;
}

const { currentSlug } = Astro.props;

const blogEntries = await getCollection('blog');
const projectEntries = await getCollection('projects');
const courseEntries = (await getCollection('courses')).filter(
  (course) => course.id.endsWith('index.mdx') || course.id.endsWith('index.md')
);

const allContent = [
  ...blogEntries.map(entry => ({
    type: 'blog' as const,
    title: entry.data.title,
    description: entry.data.description,
    href: `/blog/${entry.slug}/`,
    tags: entry.data.tags || [],
    publishDate: entry.data.publishDate,
    heroImage: entry.data.heroImage,
    slug: entry.slug,
  })),
  ...projectEntries.map(entry => ({
    type: 'project' as const,
    title: entry.data.title,
    description: entry.data.description,
    href: `/projects/${entry.slug}/`,
    tags: entry.data.tags || [],
    publishDate: entry.data.publishDate,
    heroImage: entry.data.heroImage,
    slug: entry.slug,
  })),
  ...courseEntries.map(entry => ({
    type: 'course' as const,
    title: entry.data.title,
    description: entry.data.description,
    href: `/courses/${entry.slug.replace(/\/index$/, '')}/`,
    tags: entry.data.tags || [],
    publishDate: entry.data.publishDate,
    heroImage: entry.data.heroImage,
    slug: entry.slug.replace(/\/index$/, ''),
  })),
];

const fallbackDate = new Date('1970-01-01');
const relatedContent = allContent
  .filter(item => item.slug !== currentSlug)
  .sort((a, b) => 
    (b.publishDate ? new Date(b.publishDate) : fallbackDate).valueOf() - 
    (a.publishDate ? new Date(a.publishDate) : fallbackDate).valueOf()
  )
  .slice(0, 6);
---

{relatedContent.length > 0 && (
  <section class="py-20 px-4">
    <div class="container mx-auto max-w-7xl">
      <div class="text-center mb-12">
        <h3 class="text-3xl font-bold text-gray-900 mb-2">Continue Exploring</h3>
        <p class="text-gray-600">Discover more articles and projects</p>
      </div>
      
      <div class="relative mx-4">
      <div 
        id="related-content-scroll" 
        class="flex gap-6 overflow-x-auto scroll-smooth pb-4 scrollbar-hide"
        style="scrollbar-width: none; -ms-overflow-style: none;"
      >
        {relatedContent.map(item => (
          <div class="flex-shrink-0 w-80 sm:w-96">
            <Card
              title={item.title}
              description={item.description}
              href={item.href}
              tags={item.tags}
              type={item.type}
              publishDate={item.publishDate}
              heroImage={item.heroImage}
            />
          </div>
        ))}
      </div>
      
      {relatedContent.length > 2 && (
        <>
          <button
            id="scroll-left"
            class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 w-10 h-10 bg-white border border-gray-200 rounded-full shadow-lg flex items-center justify-center hover:bg-gray-50 hover:border-accent transition-all duration-200 z-10 opacity-50 hover:opacity-100"
            aria-label="Scroll left"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-600">
              <path d="m15 18-6-6 6-6"/>
            </svg>
          </button>
          
          <button
            id="scroll-right"
            class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 w-10 h-10 bg-white border border-gray-200 rounded-full shadow-lg flex items-center justify-center hover:bg-gray-50 hover:border-accent transition-all duration-200 z-10 opacity-50 hover:opacity-100"
            aria-label="Scroll right"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-600">
              <path d="m9 18 6-6-6-6"/>
            </svg>
          </button>
        </>
      )}
      </div>
    </div>
  </section>
)}

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  .scrollbar-hide {
    scrollbar-width: none;
  }
</style>

<script>
  if (typeof window !== 'undefined') {
    const setupScrollNavigation = () => {
      const scrollContainer = document.getElementById('related-content-scroll');
      const leftButton = document.getElementById('scroll-left');
      const rightButton = document.getElementById('scroll-right');
      
      if (!scrollContainer || !leftButton || !rightButton) return;
      
      const scrollAmount = 320;
      
      leftButton.addEventListener('click', () => {
        scrollContainer.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
      });
      
      rightButton.addEventListener('click', () => {
        scrollContainer.scrollBy({ left: scrollAmount, behavior: 'smooth' });
      });
      
      const updateButtonVisibility = () => {
        const { scrollLeft, scrollWidth, clientWidth } = scrollContainer;
        
        leftButton.style.opacity = scrollLeft > 0 ? '1' : '0.5';
        rightButton.style.opacity = scrollLeft < scrollWidth - clientWidth - 10 ? '1' : '0.5';
      };
      
      scrollContainer.addEventListener('scroll', updateButtonVisibility);
      updateButtonVisibility();
    };
    
    setupScrollNavigation();
    
    document.addEventListener('astro:after-swap', setupScrollNavigation);
  }
</script>