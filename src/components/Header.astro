---
const navLinks = [
  { name: "Home", href: "/" },
  { name: "Portfolio", href: "/portfolio/" },
  { name: "About", href: "/about/" },
  { name: "Contact", href: "/contact/" },
];

const currentPath = Astro.url.pathname.replace(/\/$/, "");

const isActiveLink = (linkHref: string) => {
  const normalizedLink = linkHref.replace(/\/$/, "");
  
  // Show Portfolio as active for all content pages
  if (linkHref === "/portfolio/") {
    return currentPath === normalizedLink || 
           currentPath.startsWith("/blog/") ||
           currentPath.startsWith("/projects/") ||
           currentPath.startsWith("/courses/");
  }
  
  return currentPath === normalizedLink;
};
---
<header class="bg-white/50 backdrop-blur-sm border-b border-gray-200/50 p-4 fixed top-0 w-full z-50">
  <div class="container mx-auto flex justify-between items-center px-4 md:px-8">
    <a href="/" class="text-xl font-bold text-gray-900 hover:text-accent transition-colors">Faisal Durbaa</a>
    
    <nav class="hidden md:flex space-x-2"> 
      {navLinks.map(link => (
        <a
          href={link.href}
          class:list={[
            "py-2 px-4 rounded-md transition-all duration-200",
            isActiveLink(link.href)
              ? 'bg-accent text-white font-semibold'
              : 'text-gray-700 hover:bg-accent/10 hover:text-accent'
          ]}
        >
          {link.name}
        </a>
      ))}
    </nav>

    <div class="md:hidden">
      <button id="mobile-menu-button" aria-controls="mobile-menu" aria-expanded="false" class="p-2 rounded-md text-gray-700 hover:bg-accent/10 hover:text-accent focus:outline-none focus:ring-2 focus:ring-inset focus:ring-accent">
        <span class="sr-only">Open main menu</span>
        <svg id="hamburger-icon" class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
        <svg id="close-icon" class="h-6 w-6 hidden" stroke="currentColor" fill="none" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
  </div>

  <div id="mobile-menu" class="hidden md:hidden">
    <nav class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
      {navLinks.map(link => (
        <a
          href={link.href}
          class:list={[
            "block py-2 px-3 rounded-md text-base font-medium",
            isActiveLink(link.href)
              ? 'bg-accent text-white'
              : 'text-gray-700 hover:bg-accent/10 hover:text-accent'
          ]}
          aria-current={isActiveLink(link.href) ? 'page' : undefined}
        >
          {link.name}
        </a>
      ))}
    </nav>
  </div>
</header>

<script>
  if (typeof window !== 'undefined') {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const hamburgerIcon = document.getElementById('hamburger-icon');
    const closeIcon = document.getElementById('close-icon');

    function toggleMenu() {
      if (!mobileMenuButton || !mobileMenu || !hamburgerIcon || !closeIcon) return;
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
      mobileMenu.classList.toggle('hidden');
      hamburgerIcon.classList.toggle('hidden');
      closeIcon.classList.toggle('hidden');
    }

    if (mobileMenuButton) {
      mobileMenuButton.addEventListener('click', toggleMenu);
    }

    if (mobileMenu) {
      mobileMenu.addEventListener('click', (e) => {
        const target = e.target as HTMLElement | null;
        if (target && target.tagName === 'A') {
          toggleMenu();
        }
      });
    }

    document.addEventListener('astro:after-swap', () => {
      if (!mobileMenuButton) return;
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      if (isExpanded) {
        toggleMenu();
      }
    });
  }
</script>
