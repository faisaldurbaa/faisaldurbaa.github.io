---
// src/components/Accordion.astro
import { marked } from 'marked';

export interface Props {
  summary: string;
  content: string;
}
const { summary, content } = Astro.props;
const htmlContent = marked.parse(content);
---
<details class="accordion-details group border-b border-gray-200 py-4 last:border-b-0">
  <summary class="flex justify-between items-center cursor-pointer list-none">
    <h3 class="text-xl font-semibold text-gray-800">{summary}</h3>
    <span class="transition-transform duration-300 group-open:rotate-180">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5"><path d="m6 9 6 6 6-6"/></svg>
    </span>
  </summary>
  
  <div class="content-wrapper overflow-hidden transition-all duration-500 ease-in-out" style="max-height: 0;">
    <div class="prose max-w-none pt-4 text-gray-600" set:html={htmlContent} />
  </div>
</details>

<script is:inline>
  document.querySelectorAll('.accordion-details').forEach((details) => {
    // Skip if already initialized
    if (details.dataset.initialized) return;
    details.dataset.initialized = 'true';
    
    const summary = details.querySelector('summary');
    const contentWrapper = details.querySelector('.content-wrapper');
    let isAnimating = false;

    const handleClick = (event) => {
      if (isAnimating) return; // Prevent rapid clicking issues
      
      if (details.open) {
        // Only prevent default when closing to add animation
        event.preventDefault();
        isAnimating = true;
        contentWrapper.style.maxHeight = '0px';
        setTimeout(() => {
          details.open = false;
          isAnimating = false;
        }, 500);
      }
      // For opening: let browser handle it naturally, toggle event will handle height
    };

    const handleToggle = () => {
      if (details.open && !isAnimating) {
        isAnimating = true;
        // Calculate real height by temporarily removing constraints
        contentWrapper.style.maxHeight = 'none';
        
        // Simple approach: measure after a short delay to allow content to render
        setTimeout(() => {
          const height = contentWrapper.scrollHeight;
          contentWrapper.style.maxHeight = '0px';
          
          // Animate to real height
          requestAnimationFrame(() => {
            contentWrapper.style.maxHeight = `${height}px`;
            // Reset animation flag after animation completes
            setTimeout(() => {
              isAnimating = false;
            }, 500);
          });
        }, 10); // Small delay to ensure content is rendered
      }
    };

    summary.addEventListener('click', handleClick);
    details.addEventListener('toggle', handleToggle);
  });
</script>