---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import FadeIn from '../components/FadeIn.astro';
import Card from '../components/Card.astro';

const blogEntries = await getCollection('blog');
const projectEntries = await getCollection('projects');
const courseEntries = (await getCollection('courses')).filter(
  (course) => course.id.endsWith('index.mdx') || course.id.endsWith('index.md')
);

const allContent = [
  ...blogEntries.map(entry => ({
    type: 'blog' as const,
    title: entry.data.title,
    description: entry.data.description,
    href: `/blog/${entry.id.replace(/\.mdx?$/, '')}/`,
    tags: entry.data.tags,
    publishDate: entry.data.publishDate,
    heroImage: entry.data.heroImage,
  })),
  ...projectEntries.map(entry => ({
    type: 'project' as const,
    title: entry.data.title,
    description: entry.data.description,
    href: `/projects/${entry.id.replace(/\.mdx?$/, '')}/`,
    tags: entry.data.tags,
    publishDate: entry.data.publishDate,
    heroImage: entry.data.heroImage,
  })),
  ...courseEntries.map(entry => ({
    type: 'course' as const,
    title: entry.data.title,
    description: entry.data.description,
    href: `/courses/${entry.id.split('/')[0]}/`,
    tags: entry.data.tags || [],
    publishDate: entry.data.publishDate,
    heroImage: entry.data.heroImage,
  })),
];

const fallbackDate = new Date('1970-01-01');

const sortedContent = allContent.sort((a, b) => 
  (b.publishDate ? new Date(b.publishDate) : fallbackDate).valueOf() - 
  (a.publishDate ? new Date(a.publishDate) : fallbackDate).valueOf()
);

const seo = {
  title: "Portfolio",
  description: "A curated collection of my projects, articles, and courses."
};
---
<Layout seo={seo}>
  <div class="container mx-auto p-8">
    <FadeIn>
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold">My Portfolio</h1>
      </div>

      <div class="flex flex-col md:flex-row justify-center items-center gap-6 mb-12">
        <div class="w-full md:w-1/3 flex justify-center">
          <input type="text" id="search-input" placeholder="Search by title..." class="p-2 border border-gray-300 rounded-md w-full max-w-md">
        </div>
        <div class="w-full md:w-auto flex justify-center md:justify-end">
          <select id="filter-select" class="p-2 border border-gray-300 rounded-md bg-white w-full md:w-auto">
            <option value="all" selected>All Categories</option>
            <option value="project">Projects</option>
            <option value="blog">Blogs</option>
            <option value="course">Courses</option>
          </select>
        </div>
      </div>
      
      <div id="portfolio-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 items-stretch">
        {sortedContent.map(item => (
          <div class="portfolio-item h-full" data-type={item.type} data-title={item.title.toLowerCase()}>
            <Card 
              title={item.title}
              description={item.description}
              href={item.href}
              tags={item.tags ?? []}
              type={item.type}
              publishDate={item.publishDate} 
              heroImage={item.heroImage}
            />
          </div>
        ))}
      </div>
    </FadeIn>
  </div>
</Layout>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const filterSelect = document.getElementById('filter-select');
    const searchInput = document.getElementById('search-input');
    const portfolioItems = document.querySelectorAll('.portfolio-item');
    
    function applyFilters() {
      const currentFilter = filterSelect.value;
      const searchTerm = searchInput.value.toLowerCase();
      
      portfolioItems.forEach(item => {
        const itemType = item.dataset.type;
        const itemTitle = item.dataset.title;
        
        const typeMatch = currentFilter === 'all' || currentFilter === itemType;
        const searchMatch = itemTitle.includes(searchTerm);

        if (typeMatch && searchMatch) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    }

    filterSelect.addEventListener('change', applyFilters);
    searchInput.addEventListener('input', applyFilters);
  });
</script>